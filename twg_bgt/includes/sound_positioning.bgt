void position_sound_1d(sound@ handle, int listener_x, int source_x, float pan_step, float volume_step, float start_pan, float start_volume)
{
int delta=0;
float final_pan=start_pan;
float final_volume=start_volume;
if(source_x<listener_x)
{
delta=listener_x-source_x;
final_pan-=(delta*pan_step);
final_volume-=(delta*volume_step);
}
if(source_x>listener_x)
{
delta=source_x-listener_x;
final_pan+=(delta*pan_step);
final_volume-=(delta*volume_step);
}
if(final_pan<-100)
{
final_pan=-100;
}
if(final_pan>100)
{
final_pan=100;
}
if(final_volume<-100)
{
final_volume=-100;
}
if(handle.pan!=final_pan)
handle.pan=final_pan;
if(handle.volume!=final_volume)
handle.volume=final_volume;
}
void position_sound_2d(sound@ handle, float listener_x, float listener_y, float source_x, float source_y, double theta, float pan_step, float volume_step, float behind_pitch_decrease, float start_pan, float start_volume, float start_pitch)
{
float delta_x=0;
float delta_y=0;
float final_pan=start_pan;
float final_volume=start_volume;
float final_pitch=start_pitch;
float rotational_source_x=source_x;
float rotational_source_y=source_y;
if(theta > 0.0)
{
rotational_source_x = (cosine(theta) * (source_x-listener_x)) - (sine(theta) * (source_y-listener_y)) + listener_x;
rotational_source_y = (sine(theta) * (source_x-listener_x)) + (cosine(theta) * (source_y-listener_y)) + listener_y;
source_x=rotational_source_x;
source_y=rotational_source_y;
}
if(source_x<listener_x)
{
delta_x=listener_x-source_x;
final_pan-=(delta_x*pan_step);
final_volume-=(delta_x*volume_step);
}
if(source_x>listener_x)
{
delta_x=source_x-listener_x;
final_pan+=(delta_x*pan_step);
final_volume-=(delta_x*volume_step);
}
if(source_y<listener_y)
{
final_pitch-=absolute(behind_pitch_decrease);
delta_y=listener_y-source_y;
final_volume-=(delta_y*volume_step);
}
if(source_y>listener_y)
{
delta_y=source_y-listener_y;
final_volume-=(delta_y*volume_step);
}
if(final_pan<-100)
{
final_pan=-100;
}
if(final_pan>100)
{
final_pan=100;
}
if(final_volume<-100)
{
final_volume=-100;
}
if(final_pitch<handle.pitch_lower_limit)
{
final_pitch=handle.pitch_lower_limit;
}
if(handle.pan!=final_pan)
handle.pan=final_pan;
if(handle.volume!=final_volume)
handle.volume=final_volume;
if(handle.pitch!=final_pitch)
handle.pitch=final_pitch;
}
void position_sound_3d(sound@ handle, float listener_x, float listener_y, float listener_z, float source_x, float source_y, float source_z, double theta, float pan_step, float volume_step, float behind_pitch_decrease, float start_pan, float start_volume, float start_pitch)
{
float delta_x=0;
float delta_y=0;
float delta_z=0;
float final_pan=start_pan;
float final_volume=start_volume;
float final_pitch=start_pitch;
float rotational_source_x=source_x;
float rotational_source_y=source_y;
if(theta > 0.0)
{
rotational_source_x = (cosine(theta) * (source_x-listener_x)) - (sine(theta) * (source_y-listener_y)) + listener_x;
rotational_source_y = (sine(theta) * (source_x-listener_x)) + (cosine(theta) * (source_y-listener_y)) + listener_y;
source_x=rotational_source_x;
source_y=rotational_source_y;
}
if(source_x<listener_x)
{
delta_x=listener_x-source_x;
final_pan-=(delta_x*pan_step);
final_volume-=(delta_x*volume_step);
}
if(source_x>listener_x)
{
delta_x=source_x-listener_x;
final_pan+=(delta_x*pan_step);
final_volume-=(delta_x*volume_step);
}
if(source_y<listener_y)
{
final_pitch-=absolute(behind_pitch_decrease);
delta_y=listener_y-source_y;
final_volume-=(delta_y*volume_step);
}
if(source_y>listener_y)
{
delta_y=source_y-listener_y;
final_volume-=(delta_y*volume_step);
}
if(source_z<listener_z)
{
final_pitch-=absolute(behind_pitch_decrease);
delta_z=listener_z-source_z;
final_volume-=(delta_z*volume_step);
}
if(source_z>listener_z)
{
delta_z=source_z-listener_z;
final_volume-=(delta_z*volume_step);
}
if(final_pan<-100)
{
final_pan=-100;
}
if(final_pan>100)
{
final_pan=100;
}
if(final_volume<-100)
{
final_volume=-100;
}
if(final_pitch<handle.pitch_lower_limit)
{
final_pitch=handle.pitch_lower_limit;
}
if(handle.pan!=final_pan)
handle.pan=final_pan;
if(handle.volume!=final_volume)
handle.volume=final_volume;
if(handle.pitch!=final_pitch)
handle.pitch=final_pitch;
}
