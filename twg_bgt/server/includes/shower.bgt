shower@[] showers(0);
class shower
{
int minx, maxx, miny, maxy, minz, maxz;
bool aberta=false;
string map;
timer fechar, fechando;
shower(int shminx, int shmaxx, int shminy, int shmaxy, int shminz, int shmaxz, string shmap)
{
minx=shminx;
maxx=shmaxx;
miny=shminy;
maxy=shmaxy;
minz=shminz;
maxz=shmaxz;
map=shmap;
fechar.force(0);
fechar.pause();
fechando.force(0);
fechando.pause();
}
void loop()
{
if(aberta&&fechar.elapsed>=43510)
{
aberta=false;
for(uint i2=0; i2<players.length(); i2++)
{
if(map==players[i2].map and minx<=players[i2].x and maxx>=players[i2].x and miny<=players[i2].y and maxy>=players[i2].y and minz<=players[i2].z and maxz>=players[i2].z)
{
send_reliable(players[i2],"startmoving",0);
}
}
fechando.force(0);
fechando.pause();
fechar.force(0);
fechar.pause();
}
if(aberta&&fechando.elapsed>=random(1050,1990))
{
fechando.restart();
for(uint i2=0;i2<players.length();i2++)
{
if(map==players[i2].map and minx<=players[i2].x and maxx>=players[i2].x and miny<=players[i2].y and maxy>=players[i2].y and minz<=players[i2].z and maxz>=players[i2].z)
{
players[i2].dirty-=2.5;
players[i2].wet+=3.5;
int n=random(1,2);
if(n==1) players[i2].temperaturelevel+=random(0,1);
else if(n==2) players[i2].temperaturelevel-=random(0,1);
}
}
}
}
}
void spawn_shower(int minx, int maxx, int miny, int maxy, int minz, int maxz, string map)
{
shower sh(minx, maxx, miny, maxy, minz, maxz, map);
showers.insert_last(sh);
}
void remove_shower(int index)
{
if(index>-1)
{
@showers[index]=null;
showers.remove_at(index);
}
}
void remove_all_showers()
{
for(uint i=0; i<showers.length(); i++)
{
remove_shower(i);
}
}
void clear_showers_on_map(string map)
{
for(uint i=0; i<showers.length(); i+=1)
{
if(showers[i].map==map) remove_shower(i);
}
}
